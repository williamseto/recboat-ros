// Generated by gencpp from file vcu_relay/vcu_status.msg
// DO NOT EDIT!


#ifndef VCU_RELAY_MESSAGE_VCU_STATUS_H
#define VCU_RELAY_MESSAGE_VCU_STATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace vcu_relay
{
template <class ContainerAllocator>
struct vcu_status_
{
  typedef vcu_status_<ContainerAllocator> Type;

  vcu_status_()
    : header()
    , ver(0)
    , sec(0)
    , usec(0)
    , state(0)
    , port_throttle(0.0)
    , stbd_throttle(0.0)
    , port_shift(0.0)
    , stbd_shift(0.0)
    , port_throttle_out(0.0)
    , stbd_throttle_out(0.0)
    , steer_angle(0.0)
    , hci_switch(0)
    , port_ind(0)
    , stbd_ind(0)
    , remote_select(0)
    , autoled(0)
    , have_ctrl(0)
    , steer_angle_req(0.0)
    , steer_mode(0)
    , rt_amps(0)
    , rt_bamps(0)
    , rt_ff(0)
    , rt_fm(0)
    , rt_fs(0)
    , rt_power(0)
    , rt_temp(0)
    , rt_volt(0)  {
    }
  vcu_status_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , ver(0)
    , sec(0)
    , usec(0)
    , state(0)
    , port_throttle(0.0)
    , stbd_throttle(0.0)
    , port_shift(0.0)
    , stbd_shift(0.0)
    , port_throttle_out(0.0)
    , stbd_throttle_out(0.0)
    , steer_angle(0.0)
    , hci_switch(0)
    , port_ind(0)
    , stbd_ind(0)
    , remote_select(0)
    , autoled(0)
    , have_ctrl(0)
    , steer_angle_req(0.0)
    , steer_mode(0)
    , rt_amps(0)
    , rt_bamps(0)
    , rt_ff(0)
    , rt_fm(0)
    , rt_fs(0)
    , rt_power(0)
    , rt_temp(0)
    , rt_volt(0)  {
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _ver_type;
  _ver_type ver;

   typedef uint32_t _sec_type;
  _sec_type sec;

   typedef uint32_t _usec_type;
  _usec_type usec;

   typedef uint32_t _state_type;
  _state_type state;

   typedef float _port_throttle_type;
  _port_throttle_type port_throttle;

   typedef float _stbd_throttle_type;
  _stbd_throttle_type stbd_throttle;

   typedef float _port_shift_type;
  _port_shift_type port_shift;

   typedef float _stbd_shift_type;
  _stbd_shift_type stbd_shift;

   typedef float _port_throttle_out_type;
  _port_throttle_out_type port_throttle_out;

   typedef float _stbd_throttle_out_type;
  _stbd_throttle_out_type stbd_throttle_out;

   typedef float _steer_angle_type;
  _steer_angle_type steer_angle;

   typedef uint8_t _hci_switch_type;
  _hci_switch_type hci_switch;

   typedef uint8_t _port_ind_type;
  _port_ind_type port_ind;

   typedef uint8_t _stbd_ind_type;
  _stbd_ind_type stbd_ind;

   typedef uint8_t _remote_select_type;
  _remote_select_type remote_select;

   typedef uint8_t _autoled_type;
  _autoled_type autoled;

   typedef uint8_t _have_ctrl_type;
  _have_ctrl_type have_ctrl;

   typedef float _steer_angle_req_type;
  _steer_angle_req_type steer_angle_req;

   typedef int32_t _steer_mode_type;
  _steer_mode_type steer_mode;

   typedef int16_t _rt_amps_type;
  _rt_amps_type rt_amps;

   typedef int16_t _rt_bamps_type;
  _rt_bamps_type rt_bamps;

   typedef uint8_t _rt_ff_type;
  _rt_ff_type rt_ff;

   typedef uint8_t _rt_fm_type;
  _rt_fm_type rt_fm;

   typedef uint8_t _rt_fs_type;
  _rt_fs_type rt_fs;

   typedef int16_t _rt_power_type;
  _rt_power_type rt_power;

   typedef uint16_t _rt_temp_type;
  _rt_temp_type rt_temp;

   typedef uint16_t _rt_volt_type;
  _rt_volt_type rt_volt;




  typedef boost::shared_ptr< ::vcu_relay::vcu_status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vcu_relay::vcu_status_<ContainerAllocator> const> ConstPtr;

}; // struct vcu_status_

typedef ::vcu_relay::vcu_status_<std::allocator<void> > vcu_status;

typedef boost::shared_ptr< ::vcu_relay::vcu_status > vcu_statusPtr;
typedef boost::shared_ptr< ::vcu_relay::vcu_status const> vcu_statusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vcu_relay::vcu_status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vcu_relay::vcu_status_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace vcu_relay

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/jade/share/std_msgs/cmake/../msg'], 'vcu_relay': ['/home/bikramjothanzra/recboat-ros/src/vcu_relay/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::vcu_relay::vcu_status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vcu_relay::vcu_status_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vcu_relay::vcu_status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vcu_relay::vcu_status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vcu_relay::vcu_status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vcu_relay::vcu_status_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vcu_relay::vcu_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b5c6dfd3e6cfa86f2afab134f3b7116c";
  }

  static const char* value(const ::vcu_relay::vcu_status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb5c6dfd3e6cfa86fULL;
  static const uint64_t static_value2 = 0x2afab134f3b7116cULL;
};

template<class ContainerAllocator>
struct DataType< ::vcu_relay::vcu_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vcu_relay/vcu_status";
  }

  static const char* value(const ::vcu_relay::vcu_status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vcu_relay::vcu_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
uint32 ver\n\
uint32 sec\n\
uint32 usec\n\
\n\
uint32 state\n\
\n\
# throttle / shift positions read back\n\
float32 port_throttle\n\
float32 stbd_throttle\n\
float32 port_shift\n\
float32 stbd_shift\n\
\n\
# commanded throttle positions\n\
float32 port_throttle_out\n\
float32 stbd_throttle_out\n\
\n\
# steering angle input\n\
float32 steer_angle\n\
\n\
# inputs\n\
uint8 hci_switch\n\
uint8 port_ind\n\
uint8 stbd_ind\n\
\n\
# outputs\n\
uint8 remote_select\n\
uint8 autoled\n\
\n\
uint8 have_ctrl\n\
\n\
float32 steer_angle_req\n\
int32 steer_mode\n\
\n\
# roboteq status\n\
int16 rt_amps   # motor amps\n\
int16 rt_bamps  # battery amps\n\
uint8 rt_ff     # fault flag\n\
uint8 rt_fm     # runtime status\n\
uint8 rt_fs     # status flag\n\
int16 rt_power  # applied power\n\
uint16 rt_temp  # heatsink temperature\n\
uint16 rt_volt  # input voltage\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::vcu_relay::vcu_status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vcu_relay::vcu_status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.ver);
      stream.next(m.sec);
      stream.next(m.usec);
      stream.next(m.state);
      stream.next(m.port_throttle);
      stream.next(m.stbd_throttle);
      stream.next(m.port_shift);
      stream.next(m.stbd_shift);
      stream.next(m.port_throttle_out);
      stream.next(m.stbd_throttle_out);
      stream.next(m.steer_angle);
      stream.next(m.hci_switch);
      stream.next(m.port_ind);
      stream.next(m.stbd_ind);
      stream.next(m.remote_select);
      stream.next(m.autoled);
      stream.next(m.have_ctrl);
      stream.next(m.steer_angle_req);
      stream.next(m.steer_mode);
      stream.next(m.rt_amps);
      stream.next(m.rt_bamps);
      stream.next(m.rt_ff);
      stream.next(m.rt_fm);
      stream.next(m.rt_fs);
      stream.next(m.rt_power);
      stream.next(m.rt_temp);
      stream.next(m.rt_volt);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct vcu_status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vcu_relay::vcu_status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vcu_relay::vcu_status_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "ver: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.ver);
    s << indent << "sec: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.sec);
    s << indent << "usec: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.usec);
    s << indent << "state: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.state);
    s << indent << "port_throttle: ";
    Printer<float>::stream(s, indent + "  ", v.port_throttle);
    s << indent << "stbd_throttle: ";
    Printer<float>::stream(s, indent + "  ", v.stbd_throttle);
    s << indent << "port_shift: ";
    Printer<float>::stream(s, indent + "  ", v.port_shift);
    s << indent << "stbd_shift: ";
    Printer<float>::stream(s, indent + "  ", v.stbd_shift);
    s << indent << "port_throttle_out: ";
    Printer<float>::stream(s, indent + "  ", v.port_throttle_out);
    s << indent << "stbd_throttle_out: ";
    Printer<float>::stream(s, indent + "  ", v.stbd_throttle_out);
    s << indent << "steer_angle: ";
    Printer<float>::stream(s, indent + "  ", v.steer_angle);
    s << indent << "hci_switch: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hci_switch);
    s << indent << "port_ind: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.port_ind);
    s << indent << "stbd_ind: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stbd_ind);
    s << indent << "remote_select: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.remote_select);
    s << indent << "autoled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.autoled);
    s << indent << "have_ctrl: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.have_ctrl);
    s << indent << "steer_angle_req: ";
    Printer<float>::stream(s, indent + "  ", v.steer_angle_req);
    s << indent << "steer_mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.steer_mode);
    s << indent << "rt_amps: ";
    Printer<int16_t>::stream(s, indent + "  ", v.rt_amps);
    s << indent << "rt_bamps: ";
    Printer<int16_t>::stream(s, indent + "  ", v.rt_bamps);
    s << indent << "rt_ff: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rt_ff);
    s << indent << "rt_fm: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rt_fm);
    s << indent << "rt_fs: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rt_fs);
    s << indent << "rt_power: ";
    Printer<int16_t>::stream(s, indent + "  ", v.rt_power);
    s << indent << "rt_temp: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.rt_temp);
    s << indent << "rt_volt: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.rt_volt);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VCU_RELAY_MESSAGE_VCU_STATUS_H
